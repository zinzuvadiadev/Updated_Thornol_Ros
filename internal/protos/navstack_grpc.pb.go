// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: navstack.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ThornolDefaultService_GetProcessStatus_FullMethodName = "/navstack.ThornolDefaultService/GetProcessStatus"
	ThornolDefaultService_NewMethod_FullMethodName        = "/navstack.ThornolDefaultService/NewMethod"
	ThornolDefaultService_RunNavStack_FullMethodName      = "/navstack.ThornolDefaultService/RunNavStack"
	ThornolDefaultService_RunSlamToolbox_FullMethodName   = "/navstack.ThornolDefaultService/RunSlamToolbox"
	ThornolDefaultService_RunCartographer_FullMethodName  = "/navstack.ThornolDefaultService/RunCartographer"
	ThornolDefaultService_StopNavStack_FullMethodName     = "/navstack.ThornolDefaultService/StopNavStack"
	ThornolDefaultService_StopSlamToolbox_FullMethodName  = "/navstack.ThornolDefaultService/StopSlamToolbox"
	ThornolDefaultService_StopCartographer_FullMethodName = "/navstack.ThornolDefaultService/StopCartographer"
)

// ThornolDefaultServiceClient is the client API for ThornolDefaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThornolDefaultServiceClient interface {
	GetProcessStatus(ctx context.Context, in *GetProcessStatusRequest, opts ...grpc.CallOption) (*GetProcessStatusResponse, error)
	NewMethod(ctx context.Context, in *NewMethodRequest, opts ...grpc.CallOption) (*NewMethodResponse, error)
	// RunNavStack copies map files and launches the navigation stack
	RunNavStack(ctx context.Context, in *RunNavStackRequest, opts ...grpc.CallOption) (*RunNavStackResponse, error)
	RunSlamToolbox(ctx context.Context, in *RunSlamToolboxRequest, opts ...grpc.CallOption) (*RunSlamToolboxResponse, error)
	RunCartographer(ctx context.Context, in *RunCartographerRequest, opts ...grpc.CallOption) (*RunCartographerResponse, error)
	StopNavStack(ctx context.Context, in *StopNavStackRequest, opts ...grpc.CallOption) (*StopNavStackResponse, error)
	StopSlamToolbox(ctx context.Context, in *StopSlamToolboxRequest, opts ...grpc.CallOption) (*StopSlamToolboxResponse, error)
	StopCartographer(ctx context.Context, in *StopCartographerRequest, opts ...grpc.CallOption) (*StopCartographerResponse, error)
}

type thornolDefaultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThornolDefaultServiceClient(cc grpc.ClientConnInterface) ThornolDefaultServiceClient {
	return &thornolDefaultServiceClient{cc}
}

func (c *thornolDefaultServiceClient) GetProcessStatus(ctx context.Context, in *GetProcessStatusRequest, opts ...grpc.CallOption) (*GetProcessStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProcessStatusResponse)
	err := c.cc.Invoke(ctx, ThornolDefaultService_GetProcessStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thornolDefaultServiceClient) NewMethod(ctx context.Context, in *NewMethodRequest, opts ...grpc.CallOption) (*NewMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewMethodResponse)
	err := c.cc.Invoke(ctx, ThornolDefaultService_NewMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thornolDefaultServiceClient) RunNavStack(ctx context.Context, in *RunNavStackRequest, opts ...grpc.CallOption) (*RunNavStackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunNavStackResponse)
	err := c.cc.Invoke(ctx, ThornolDefaultService_RunNavStack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thornolDefaultServiceClient) RunSlamToolbox(ctx context.Context, in *RunSlamToolboxRequest, opts ...grpc.CallOption) (*RunSlamToolboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunSlamToolboxResponse)
	err := c.cc.Invoke(ctx, ThornolDefaultService_RunSlamToolbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thornolDefaultServiceClient) RunCartographer(ctx context.Context, in *RunCartographerRequest, opts ...grpc.CallOption) (*RunCartographerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunCartographerResponse)
	err := c.cc.Invoke(ctx, ThornolDefaultService_RunCartographer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thornolDefaultServiceClient) StopNavStack(ctx context.Context, in *StopNavStackRequest, opts ...grpc.CallOption) (*StopNavStackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopNavStackResponse)
	err := c.cc.Invoke(ctx, ThornolDefaultService_StopNavStack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thornolDefaultServiceClient) StopSlamToolbox(ctx context.Context, in *StopSlamToolboxRequest, opts ...grpc.CallOption) (*StopSlamToolboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopSlamToolboxResponse)
	err := c.cc.Invoke(ctx, ThornolDefaultService_StopSlamToolbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thornolDefaultServiceClient) StopCartographer(ctx context.Context, in *StopCartographerRequest, opts ...grpc.CallOption) (*StopCartographerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopCartographerResponse)
	err := c.cc.Invoke(ctx, ThornolDefaultService_StopCartographer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThornolDefaultServiceServer is the server API for ThornolDefaultService service.
// All implementations must embed UnimplementedThornolDefaultServiceServer
// for forward compatibility.
type ThornolDefaultServiceServer interface {
	GetProcessStatus(context.Context, *GetProcessStatusRequest) (*GetProcessStatusResponse, error)
	NewMethod(context.Context, *NewMethodRequest) (*NewMethodResponse, error)
	// RunNavStack copies map files and launches the navigation stack
	RunNavStack(context.Context, *RunNavStackRequest) (*RunNavStackResponse, error)
	RunSlamToolbox(context.Context, *RunSlamToolboxRequest) (*RunSlamToolboxResponse, error)
	RunCartographer(context.Context, *RunCartographerRequest) (*RunCartographerResponse, error)
	StopNavStack(context.Context, *StopNavStackRequest) (*StopNavStackResponse, error)
	StopSlamToolbox(context.Context, *StopSlamToolboxRequest) (*StopSlamToolboxResponse, error)
	StopCartographer(context.Context, *StopCartographerRequest) (*StopCartographerResponse, error)
	mustEmbedUnimplementedThornolDefaultServiceServer()
}

// UnimplementedThornolDefaultServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThornolDefaultServiceServer struct{}

func (UnimplementedThornolDefaultServiceServer) GetProcessStatus(context.Context, *GetProcessStatusRequest) (*GetProcessStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessStatus not implemented")
}
func (UnimplementedThornolDefaultServiceServer) NewMethod(context.Context, *NewMethodRequest) (*NewMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMethod not implemented")
}
func (UnimplementedThornolDefaultServiceServer) RunNavStack(context.Context, *RunNavStackRequest) (*RunNavStackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunNavStack not implemented")
}
func (UnimplementedThornolDefaultServiceServer) RunSlamToolbox(context.Context, *RunSlamToolboxRequest) (*RunSlamToolboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSlamToolbox not implemented")
}
func (UnimplementedThornolDefaultServiceServer) RunCartographer(context.Context, *RunCartographerRequest) (*RunCartographerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCartographer not implemented")
}
func (UnimplementedThornolDefaultServiceServer) StopNavStack(context.Context, *StopNavStackRequest) (*StopNavStackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopNavStack not implemented")
}
func (UnimplementedThornolDefaultServiceServer) StopSlamToolbox(context.Context, *StopSlamToolboxRequest) (*StopSlamToolboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSlamToolbox not implemented")
}
func (UnimplementedThornolDefaultServiceServer) StopCartographer(context.Context, *StopCartographerRequest) (*StopCartographerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCartographer not implemented")
}
func (UnimplementedThornolDefaultServiceServer) mustEmbedUnimplementedThornolDefaultServiceServer() {}
func (UnimplementedThornolDefaultServiceServer) testEmbeddedByValue()                               {}

// UnsafeThornolDefaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThornolDefaultServiceServer will
// result in compilation errors.
type UnsafeThornolDefaultServiceServer interface {
	mustEmbedUnimplementedThornolDefaultServiceServer()
}

func RegisterThornolDefaultServiceServer(s grpc.ServiceRegistrar, srv ThornolDefaultServiceServer) {
	// If the following call pancis, it indicates UnimplementedThornolDefaultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThornolDefaultService_ServiceDesc, srv)
}

func _ThornolDefaultService_GetProcessStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThornolDefaultServiceServer).GetProcessStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThornolDefaultService_GetProcessStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThornolDefaultServiceServer).GetProcessStatus(ctx, req.(*GetProcessStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThornolDefaultService_NewMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThornolDefaultServiceServer).NewMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThornolDefaultService_NewMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThornolDefaultServiceServer).NewMethod(ctx, req.(*NewMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThornolDefaultService_RunNavStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunNavStackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThornolDefaultServiceServer).RunNavStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThornolDefaultService_RunNavStack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThornolDefaultServiceServer).RunNavStack(ctx, req.(*RunNavStackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThornolDefaultService_RunSlamToolbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunSlamToolboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThornolDefaultServiceServer).RunSlamToolbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThornolDefaultService_RunSlamToolbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThornolDefaultServiceServer).RunSlamToolbox(ctx, req.(*RunSlamToolboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThornolDefaultService_RunCartographer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCartographerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThornolDefaultServiceServer).RunCartographer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThornolDefaultService_RunCartographer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThornolDefaultServiceServer).RunCartographer(ctx, req.(*RunCartographerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThornolDefaultService_StopNavStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopNavStackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThornolDefaultServiceServer).StopNavStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThornolDefaultService_StopNavStack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThornolDefaultServiceServer).StopNavStack(ctx, req.(*StopNavStackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThornolDefaultService_StopSlamToolbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSlamToolboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThornolDefaultServiceServer).StopSlamToolbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThornolDefaultService_StopSlamToolbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThornolDefaultServiceServer).StopSlamToolbox(ctx, req.(*StopSlamToolboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThornolDefaultService_StopCartographer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCartographerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThornolDefaultServiceServer).StopCartographer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThornolDefaultService_StopCartographer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThornolDefaultServiceServer).StopCartographer(ctx, req.(*StopCartographerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThornolDefaultService_ServiceDesc is the grpc.ServiceDesc for ThornolDefaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThornolDefaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "navstack.ThornolDefaultService",
	HandlerType: (*ThornolDefaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProcessStatus",
			Handler:    _ThornolDefaultService_GetProcessStatus_Handler,
		},
		{
			MethodName: "NewMethod",
			Handler:    _ThornolDefaultService_NewMethod_Handler,
		},
		{
			MethodName: "RunNavStack",
			Handler:    _ThornolDefaultService_RunNavStack_Handler,
		},
		{
			MethodName: "RunSlamToolbox",
			Handler:    _ThornolDefaultService_RunSlamToolbox_Handler,
		},
		{
			MethodName: "RunCartographer",
			Handler:    _ThornolDefaultService_RunCartographer_Handler,
		},
		{
			MethodName: "StopNavStack",
			Handler:    _ThornolDefaultService_StopNavStack_Handler,
		},
		{
			MethodName: "StopSlamToolbox",
			Handler:    _ThornolDefaultService_StopSlamToolbox_Handler,
		},
		{
			MethodName: "StopCartographer",
			Handler:    _ThornolDefaultService_StopCartographer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "navstack.proto",
}
