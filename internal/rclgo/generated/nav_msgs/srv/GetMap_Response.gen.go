// Code generated by rclgo-gen. DO NOT EDIT.

package nav_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	nav_msgs_msg "thornol/internal/rclgo/generated/nav_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <nav_msgs/srv/get_map.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("nav_msgs/GetMap_Response", GetMap_ResponseTypeSupport)
	typemap.RegisterMessage("nav_msgs/srv/GetMap_Response", GetMap_ResponseTypeSupport)
}

type GetMap_Response struct {
	Map nav_msgs_msg.OccupancyGrid `yaml:"map"`// Get the map as a nav_msgs/OccupancyGridThe current map hosted by this map service.
}

// NewGetMap_Response creates a new GetMap_Response with default values.
func NewGetMap_Response() *GetMap_Response {
	self := GetMap_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetMap_Response) Clone() *GetMap_Response {
	c := &GetMap_Response{}
	c.Map = *t.Map.Clone()
	return c
}

func (t *GetMap_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetMap_Response) SetDefaults() {
	t.Map.SetDefaults()
}

func (t *GetMap_Response) GetTypeSupport() types.MessageTypeSupport {
	return GetMap_ResponseTypeSupport
}

// GetMap_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GetMap_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewGetMap_ResponsePublisher creates and returns a new publisher for the
// GetMap_Response
func NewGetMap_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GetMap_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, GetMap_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetMap_ResponsePublisher{pub}, nil
}

func (p *GetMap_ResponsePublisher) Publish(msg *GetMap_Response) error {
	return p.Publisher.Publish(msg)
}

// GetMap_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GetMap_ResponseSubscription struct {
	*rclgo.Subscription
}

// GetMap_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a GetMap_ResponseSubscription.
type GetMap_ResponseSubscriptionCallback func(msg *GetMap_Response, info *rclgo.MessageInfo, err error)

// NewGetMap_ResponseSubscription creates and returns a new subscription for the
// GetMap_Response
func NewGetMap_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GetMap_ResponseSubscriptionCallback) (*GetMap_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GetMap_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GetMap_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetMap_ResponseSubscription{sub}, nil
}

func (s *GetMap_ResponseSubscription) TakeMessage(out *GetMap_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetMap_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetMap_ResponseSlice(dst, src []GetMap_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetMap_ResponseTypeSupport types.MessageTypeSupport = _GetMap_ResponseTypeSupport{}

type _GetMap_ResponseTypeSupport struct{}

func (t _GetMap_ResponseTypeSupport) New() types.Message {
	return NewGetMap_Response()
}

func (t _GetMap_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.nav_msgs__srv__GetMap_Response
	return (unsafe.Pointer)(C.nav_msgs__srv__GetMap_Response__create())
}

func (t _GetMap_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.nav_msgs__srv__GetMap_Response__destroy((*C.nav_msgs__srv__GetMap_Response)(pointer_to_free))
}

func (t _GetMap_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetMap_Response)
	mem := (*C.nav_msgs__srv__GetMap_Response)(dst)
	nav_msgs_msg.OccupancyGridTypeSupport.AsCStruct(unsafe.Pointer(&mem._map), &m.Map)
}

func (t _GetMap_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetMap_Response)
	mem := (*C.nav_msgs__srv__GetMap_Response)(ros2_message_buffer)
	nav_msgs_msg.OccupancyGridTypeSupport.AsGoStruct(&m.Map, unsafe.Pointer(&mem._map))
}

func (t _GetMap_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__srv__GetMap_Response())
}

type CGetMap_Response = C.nav_msgs__srv__GetMap_Response
type CGetMap_Response__Sequence = C.nav_msgs__srv__GetMap_Response__Sequence

func GetMap_Response__Sequence_to_Go(goSlice *[]GetMap_Response, cSlice CGetMap_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetMap_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetMap_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GetMap_Response__Sequence_to_C(cSlice *CGetMap_Response__Sequence, goSlice []GetMap_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.nav_msgs__srv__GetMap_Response)(C.malloc(C.sizeof_struct_nav_msgs__srv__GetMap_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetMap_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GetMap_Response__Array_to_Go(goSlice []GetMap_Response, cSlice []CGetMap_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetMap_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetMap_Response__Array_to_C(cSlice []CGetMap_Response, goSlice []GetMap_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetMap_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
