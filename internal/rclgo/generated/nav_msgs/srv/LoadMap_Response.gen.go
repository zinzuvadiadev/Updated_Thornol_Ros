// Code generated by rclgo-gen. DO NOT EDIT.

package nav_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	nav_msgs_msg "thornol/internal/rclgo/generated/nav_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <nav_msgs/srv/load_map.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("nav_msgs/LoadMap_Response", LoadMap_ResponseTypeSupport)
	typemap.RegisterMessage("nav_msgs/srv/LoadMap_Response", LoadMap_ResponseTypeSupport)
}
const (
	LoadMap_Response_RESULT_SUCCESS uint8 = 0// Result code defintions
	LoadMap_Response_RESULT_MAP_DOES_NOT_EXIST uint8 = 1
	LoadMap_Response_RESULT_INVALID_MAP_DATA uint8 = 2
	LoadMap_Response_RESULT_INVALID_MAP_METADATA uint8 = 3
	LoadMap_Response_RESULT_UNDEFINED_FAILURE uint8 = 255
)

type LoadMap_Response struct {
	Map nav_msgs_msg.OccupancyGrid `yaml:"map"`// Returned map is only valid if result equals RESULT_SUCCESS
	Result uint8 `yaml:"result"`
}

// NewLoadMap_Response creates a new LoadMap_Response with default values.
func NewLoadMap_Response() *LoadMap_Response {
	self := LoadMap_Response{}
	self.SetDefaults()
	return &self
}

func (t *LoadMap_Response) Clone() *LoadMap_Response {
	c := &LoadMap_Response{}
	c.Map = *t.Map.Clone()
	c.Result = t.Result
	return c
}

func (t *LoadMap_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LoadMap_Response) SetDefaults() {
	t.Map.SetDefaults()
	t.Result = 0
}

func (t *LoadMap_Response) GetTypeSupport() types.MessageTypeSupport {
	return LoadMap_ResponseTypeSupport
}

// LoadMap_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LoadMap_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewLoadMap_ResponsePublisher creates and returns a new publisher for the
// LoadMap_Response
func NewLoadMap_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LoadMap_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, LoadMap_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LoadMap_ResponsePublisher{pub}, nil
}

func (p *LoadMap_ResponsePublisher) Publish(msg *LoadMap_Response) error {
	return p.Publisher.Publish(msg)
}

// LoadMap_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LoadMap_ResponseSubscription struct {
	*rclgo.Subscription
}

// LoadMap_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a LoadMap_ResponseSubscription.
type LoadMap_ResponseSubscriptionCallback func(msg *LoadMap_Response, info *rclgo.MessageInfo, err error)

// NewLoadMap_ResponseSubscription creates and returns a new subscription for the
// LoadMap_Response
func NewLoadMap_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LoadMap_ResponseSubscriptionCallback) (*LoadMap_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LoadMap_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LoadMap_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LoadMap_ResponseSubscription{sub}, nil
}

func (s *LoadMap_ResponseSubscription) TakeMessage(out *LoadMap_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLoadMap_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLoadMap_ResponseSlice(dst, src []LoadMap_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LoadMap_ResponseTypeSupport types.MessageTypeSupport = _LoadMap_ResponseTypeSupport{}

type _LoadMap_ResponseTypeSupport struct{}

func (t _LoadMap_ResponseTypeSupport) New() types.Message {
	return NewLoadMap_Response()
}

func (t _LoadMap_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.nav_msgs__srv__LoadMap_Response
	return (unsafe.Pointer)(C.nav_msgs__srv__LoadMap_Response__create())
}

func (t _LoadMap_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.nav_msgs__srv__LoadMap_Response__destroy((*C.nav_msgs__srv__LoadMap_Response)(pointer_to_free))
}

func (t _LoadMap_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LoadMap_Response)
	mem := (*C.nav_msgs__srv__LoadMap_Response)(dst)
	nav_msgs_msg.OccupancyGridTypeSupport.AsCStruct(unsafe.Pointer(&mem._map), &m.Map)
	mem.result = C.uint8_t(m.Result)
}

func (t _LoadMap_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LoadMap_Response)
	mem := (*C.nav_msgs__srv__LoadMap_Response)(ros2_message_buffer)
	nav_msgs_msg.OccupancyGridTypeSupport.AsGoStruct(&m.Map, unsafe.Pointer(&mem._map))
	m.Result = uint8(mem.result)
}

func (t _LoadMap_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__srv__LoadMap_Response())
}

type CLoadMap_Response = C.nav_msgs__srv__LoadMap_Response
type CLoadMap_Response__Sequence = C.nav_msgs__srv__LoadMap_Response__Sequence

func LoadMap_Response__Sequence_to_Go(goSlice *[]LoadMap_Response, cSlice CLoadMap_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LoadMap_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LoadMap_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LoadMap_Response__Sequence_to_C(cSlice *CLoadMap_Response__Sequence, goSlice []LoadMap_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.nav_msgs__srv__LoadMap_Response)(C.malloc(C.sizeof_struct_nav_msgs__srv__LoadMap_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LoadMap_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LoadMap_Response__Array_to_Go(goSlice []LoadMap_Response, cSlice []CLoadMap_Response) {
	for i := 0; i < len(cSlice); i++ {
		LoadMap_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LoadMap_Response__Array_to_C(cSlice []CLoadMap_Response, goSlice []LoadMap_Response) {
	for i := 0; i < len(goSlice); i++ {
		LoadMap_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
