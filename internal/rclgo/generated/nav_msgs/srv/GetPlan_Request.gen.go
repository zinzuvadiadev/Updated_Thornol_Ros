// Code generated by rclgo-gen. DO NOT EDIT.

package nav_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "thornol/internal/rclgo/generated/geometry_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <nav_msgs/srv/get_plan.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("nav_msgs/GetPlan_Request", GetPlan_RequestTypeSupport)
	typemap.RegisterMessage("nav_msgs/srv/GetPlan_Request", GetPlan_RequestTypeSupport)
}

type GetPlan_Request struct {
	Start geometry_msgs_msg.PoseStamped `yaml:"start"`// The start pose for the plan
	Goal geometry_msgs_msg.PoseStamped `yaml:"goal"`// The final pose of the goal position
	Tolerance float32 `yaml:"tolerance"`// If the goal is obstructed, how many meters the planner canrelax the constraint in x and y before failing.
}

// NewGetPlan_Request creates a new GetPlan_Request with default values.
func NewGetPlan_Request() *GetPlan_Request {
	self := GetPlan_Request{}
	self.SetDefaults()
	return &self
}

func (t *GetPlan_Request) Clone() *GetPlan_Request {
	c := &GetPlan_Request{}
	c.Start = *t.Start.Clone()
	c.Goal = *t.Goal.Clone()
	c.Tolerance = t.Tolerance
	return c
}

func (t *GetPlan_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetPlan_Request) SetDefaults() {
	t.Start.SetDefaults()
	t.Goal.SetDefaults()
	t.Tolerance = 0
}

func (t *GetPlan_Request) GetTypeSupport() types.MessageTypeSupport {
	return GetPlan_RequestTypeSupport
}

// GetPlan_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GetPlan_RequestPublisher struct {
	*rclgo.Publisher
}

// NewGetPlan_RequestPublisher creates and returns a new publisher for the
// GetPlan_Request
func NewGetPlan_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GetPlan_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GetPlan_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetPlan_RequestPublisher{pub}, nil
}

func (p *GetPlan_RequestPublisher) Publish(msg *GetPlan_Request) error {
	return p.Publisher.Publish(msg)
}

// GetPlan_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GetPlan_RequestSubscription struct {
	*rclgo.Subscription
}

// GetPlan_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GetPlan_RequestSubscription.
type GetPlan_RequestSubscriptionCallback func(msg *GetPlan_Request, info *rclgo.MessageInfo, err error)

// NewGetPlan_RequestSubscription creates and returns a new subscription for the
// GetPlan_Request
func NewGetPlan_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GetPlan_RequestSubscriptionCallback) (*GetPlan_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GetPlan_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GetPlan_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetPlan_RequestSubscription{sub}, nil
}

func (s *GetPlan_RequestSubscription) TakeMessage(out *GetPlan_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetPlan_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetPlan_RequestSlice(dst, src []GetPlan_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetPlan_RequestTypeSupport types.MessageTypeSupport = _GetPlan_RequestTypeSupport{}

type _GetPlan_RequestTypeSupport struct{}

func (t _GetPlan_RequestTypeSupport) New() types.Message {
	return NewGetPlan_Request()
}

func (t _GetPlan_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.nav_msgs__srv__GetPlan_Request
	return (unsafe.Pointer)(C.nav_msgs__srv__GetPlan_Request__create())
}

func (t _GetPlan_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.nav_msgs__srv__GetPlan_Request__destroy((*C.nav_msgs__srv__GetPlan_Request)(pointer_to_free))
}

func (t _GetPlan_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetPlan_Request)
	mem := (*C.nav_msgs__srv__GetPlan_Request)(dst)
	geometry_msgs_msg.PoseStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.start), &m.Start)
	geometry_msgs_msg.PoseStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.goal), &m.Goal)
	mem.tolerance = C.float(m.Tolerance)
}

func (t _GetPlan_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetPlan_Request)
	mem := (*C.nav_msgs__srv__GetPlan_Request)(ros2_message_buffer)
	geometry_msgs_msg.PoseStampedTypeSupport.AsGoStruct(&m.Start, unsafe.Pointer(&mem.start))
	geometry_msgs_msg.PoseStampedTypeSupport.AsGoStruct(&m.Goal, unsafe.Pointer(&mem.goal))
	m.Tolerance = float32(mem.tolerance)
}

func (t _GetPlan_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__srv__GetPlan_Request())
}

type CGetPlan_Request = C.nav_msgs__srv__GetPlan_Request
type CGetPlan_Request__Sequence = C.nav_msgs__srv__GetPlan_Request__Sequence

func GetPlan_Request__Sequence_to_Go(goSlice *[]GetPlan_Request, cSlice CGetPlan_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetPlan_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetPlan_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GetPlan_Request__Sequence_to_C(cSlice *CGetPlan_Request__Sequence, goSlice []GetPlan_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.nav_msgs__srv__GetPlan_Request)(C.malloc(C.sizeof_struct_nav_msgs__srv__GetPlan_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetPlan_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GetPlan_Request__Array_to_Go(goSlice []GetPlan_Request, cSlice []CGetPlan_Request) {
	for i := 0; i < len(cSlice); i++ {
		GetPlan_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetPlan_Request__Array_to_C(cSlice []CGetPlan_Request, goSlice []GetPlan_Request) {
	for i := 0; i < len(goSlice); i++ {
		GetPlan_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
