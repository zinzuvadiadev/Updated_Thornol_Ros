// Code generated by rclgo-gen. DO NOT EDIT.

package nav_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <nav_msgs/srv/get_plan.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("nav_msgs/GetPlan", GetPlanTypeSupport)
	typemap.RegisterService("nav_msgs/srv/GetPlan", GetPlanTypeSupport)
}

type _GetPlanTypeSupport struct {}

func (s _GetPlanTypeSupport) Request() types.MessageTypeSupport {
	return GetPlan_RequestTypeSupport
}

func (s _GetPlanTypeSupport) Response() types.MessageTypeSupport {
	return GetPlan_ResponseTypeSupport
}

func (s _GetPlanTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__nav_msgs__srv__GetPlan())
}

// Modifying this variable is undefined behavior.
var GetPlanTypeSupport types.ServiceTypeSupport = _GetPlanTypeSupport{}

// GetPlanClient wraps rclgo.Client to provide type safe helper
// functions
type GetPlanClient struct {
	*rclgo.Client
}

// NewGetPlanClient creates and returns a new client for the
// GetPlan
func NewGetPlanClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*GetPlanClient, error) {
	client, err := node.NewClient(serviceName, GetPlanTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetPlanClient{client}, nil
}

func (s *GetPlanClient) Send(ctx context.Context, req *GetPlan_Request) (*GetPlan_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetPlan_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetPlanServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s GetPlanServiceResponseSender) SendResponse(resp *GetPlan_Response) error {
	return s.sender.SendResponse(resp)
}

type GetPlanServiceRequestHandler func(*rclgo.ServiceInfo, *GetPlan_Request, GetPlanServiceResponseSender)

// GetPlanService wraps rclgo.Service to provide type safe helper
// functions
type GetPlanService struct {
	*rclgo.Service
}

// NewGetPlanService creates and returns a new service for the
// GetPlan
func NewGetPlanService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler GetPlanServiceRequestHandler) (*GetPlanService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*GetPlan_Request)
		responseSender := GetPlanServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetPlanTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetPlanService{service}, nil
}