// Code generated by rclgo-gen. DO NOT EDIT.

package nav_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	builtin_interfaces_msg "thornol/internal/rclgo/generated/builtin_interfaces/msg"
	geometry_msgs_msg "thornol/internal/rclgo/generated/geometry_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <nav_msgs/msg/map_meta_data.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("nav_msgs/MapMetaData", MapMetaDataTypeSupport)
	typemap.RegisterMessage("nav_msgs/msg/MapMetaData", MapMetaDataTypeSupport)
}

type MapMetaData struct {
	MapLoadTime builtin_interfaces_msg.Time `yaml:"map_load_time"`// The time at which the map was loaded
	Resolution float32 `yaml:"resolution"`// The map resolution [m/cell]
	Width uint32 `yaml:"width"`// Map width [cells]
	Height uint32 `yaml:"height"`// Map height [cells]
	Origin geometry_msgs_msg.Pose `yaml:"origin"`// The origin of the map [m, m, rad].  This is the real-world pose of thebottom left corner of cell (0,0) in the map.
}

// NewMapMetaData creates a new MapMetaData with default values.
func NewMapMetaData() *MapMetaData {
	self := MapMetaData{}
	self.SetDefaults()
	return &self
}

func (t *MapMetaData) Clone() *MapMetaData {
	c := &MapMetaData{}
	c.MapLoadTime = *t.MapLoadTime.Clone()
	c.Resolution = t.Resolution
	c.Width = t.Width
	c.Height = t.Height
	c.Origin = *t.Origin.Clone()
	return c
}

func (t *MapMetaData) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MapMetaData) SetDefaults() {
	t.MapLoadTime.SetDefaults()
	t.Resolution = 0
	t.Width = 0
	t.Height = 0
	t.Origin.SetDefaults()
}

func (t *MapMetaData) GetTypeSupport() types.MessageTypeSupport {
	return MapMetaDataTypeSupport
}

// MapMetaDataPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type MapMetaDataPublisher struct {
	*rclgo.Publisher
}

// NewMapMetaDataPublisher creates and returns a new publisher for the
// MapMetaData
func NewMapMetaDataPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*MapMetaDataPublisher, error) {
	pub, err := node.NewPublisher(topic_name, MapMetaDataTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MapMetaDataPublisher{pub}, nil
}

func (p *MapMetaDataPublisher) Publish(msg *MapMetaData) error {
	return p.Publisher.Publish(msg)
}

// MapMetaDataSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type MapMetaDataSubscription struct {
	*rclgo.Subscription
}

// MapMetaDataSubscriptionCallback type is used to provide a subscription
// handler function for a MapMetaDataSubscription.
type MapMetaDataSubscriptionCallback func(msg *MapMetaData, info *rclgo.MessageInfo, err error)

// NewMapMetaDataSubscription creates and returns a new subscription for the
// MapMetaData
func NewMapMetaDataSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback MapMetaDataSubscriptionCallback) (*MapMetaDataSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg MapMetaData
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, MapMetaDataTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MapMetaDataSubscription{sub}, nil
}

func (s *MapMetaDataSubscription) TakeMessage(out *MapMetaData) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMapMetaDataSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMapMetaDataSlice(dst, src []MapMetaData) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MapMetaDataTypeSupport types.MessageTypeSupport = _MapMetaDataTypeSupport{}

type _MapMetaDataTypeSupport struct{}

func (t _MapMetaDataTypeSupport) New() types.Message {
	return NewMapMetaData()
}

func (t _MapMetaDataTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.nav_msgs__msg__MapMetaData
	return (unsafe.Pointer)(C.nav_msgs__msg__MapMetaData__create())
}

func (t _MapMetaDataTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.nav_msgs__msg__MapMetaData__destroy((*C.nav_msgs__msg__MapMetaData)(pointer_to_free))
}

func (t _MapMetaDataTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MapMetaData)
	mem := (*C.nav_msgs__msg__MapMetaData)(dst)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.map_load_time), &m.MapLoadTime)
	mem.resolution = C.float(m.Resolution)
	mem.width = C.uint32_t(m.Width)
	mem.height = C.uint32_t(m.Height)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.origin), &m.Origin)
}

func (t _MapMetaDataTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MapMetaData)
	mem := (*C.nav_msgs__msg__MapMetaData)(ros2_message_buffer)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.MapLoadTime, unsafe.Pointer(&mem.map_load_time))
	m.Resolution = float32(mem.resolution)
	m.Width = uint32(mem.width)
	m.Height = uint32(mem.height)
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Origin, unsafe.Pointer(&mem.origin))
}

func (t _MapMetaDataTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__MapMetaData())
}

type CMapMetaData = C.nav_msgs__msg__MapMetaData
type CMapMetaData__Sequence = C.nav_msgs__msg__MapMetaData__Sequence

func MapMetaData__Sequence_to_Go(goSlice *[]MapMetaData, cSlice CMapMetaData__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MapMetaData, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MapMetaDataTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func MapMetaData__Sequence_to_C(cSlice *CMapMetaData__Sequence, goSlice []MapMetaData) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.nav_msgs__msg__MapMetaData)(C.malloc(C.sizeof_struct_nav_msgs__msg__MapMetaData * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MapMetaDataTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func MapMetaData__Array_to_Go(goSlice []MapMetaData, cSlice []CMapMetaData) {
	for i := 0; i < len(cSlice); i++ {
		MapMetaDataTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MapMetaData__Array_to_C(cSlice []CMapMetaData, goSlice []MapMetaData) {
	for i := 0; i < len(goSlice); i++ {
		MapMetaDataTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
