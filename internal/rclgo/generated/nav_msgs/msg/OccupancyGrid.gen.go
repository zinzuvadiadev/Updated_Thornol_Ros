// Code generated by rclgo-gen. DO NOT EDIT.

package nav_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "thornol/internal/rclgo/generated/std_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <nav_msgs/msg/occupancy_grid.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("nav_msgs/OccupancyGrid", OccupancyGridTypeSupport)
	typemap.RegisterMessage("nav_msgs/msg/OccupancyGrid", OccupancyGridTypeSupport)
}

type OccupancyGrid struct {
	Header std_msgs_msg.Header `yaml:"header"`// This represents a 2-D grid map
	Info MapMetaData `yaml:"info"`// MetaData for the map
	Data []int8 `yaml:"data"`// The map data, in row-major order, starting with (0,0).Cell (1, 0) will be listed second, representing the next cell in the x direction.Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).The values inside are application dependent, but frequently,0 represents unoccupied, 1 represents definitely occupied, and-1 represents unknown.
}

// NewOccupancyGrid creates a new OccupancyGrid with default values.
func NewOccupancyGrid() *OccupancyGrid {
	self := OccupancyGrid{}
	self.SetDefaults()
	return &self
}

func (t *OccupancyGrid) Clone() *OccupancyGrid {
	c := &OccupancyGrid{}
	c.Header = *t.Header.Clone()
	c.Info = *t.Info.Clone()
	if t.Data != nil {
		c.Data = make([]int8, len(t.Data))
		copy(c.Data, t.Data)
	}
	return c
}

func (t *OccupancyGrid) CloneMsg() types.Message {
	return t.Clone()
}

func (t *OccupancyGrid) SetDefaults() {
	t.Header.SetDefaults()
	t.Info.SetDefaults()
	t.Data = nil
}

func (t *OccupancyGrid) GetTypeSupport() types.MessageTypeSupport {
	return OccupancyGridTypeSupport
}

// OccupancyGridPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type OccupancyGridPublisher struct {
	*rclgo.Publisher
}

// NewOccupancyGridPublisher creates and returns a new publisher for the
// OccupancyGrid
func NewOccupancyGridPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*OccupancyGridPublisher, error) {
	pub, err := node.NewPublisher(topic_name, OccupancyGridTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &OccupancyGridPublisher{pub}, nil
}

func (p *OccupancyGridPublisher) Publish(msg *OccupancyGrid) error {
	return p.Publisher.Publish(msg)
}

// OccupancyGridSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type OccupancyGridSubscription struct {
	*rclgo.Subscription
}

// OccupancyGridSubscriptionCallback type is used to provide a subscription
// handler function for a OccupancyGridSubscription.
type OccupancyGridSubscriptionCallback func(msg *OccupancyGrid, info *rclgo.MessageInfo, err error)

// NewOccupancyGridSubscription creates and returns a new subscription for the
// OccupancyGrid
func NewOccupancyGridSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback OccupancyGridSubscriptionCallback) (*OccupancyGridSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg OccupancyGrid
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, OccupancyGridTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &OccupancyGridSubscription{sub}, nil
}

func (s *OccupancyGridSubscription) TakeMessage(out *OccupancyGrid) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneOccupancyGridSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOccupancyGridSlice(dst, src []OccupancyGrid) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OccupancyGridTypeSupport types.MessageTypeSupport = _OccupancyGridTypeSupport{}

type _OccupancyGridTypeSupport struct{}

func (t _OccupancyGridTypeSupport) New() types.Message {
	return NewOccupancyGrid()
}

func (t _OccupancyGridTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.nav_msgs__msg__OccupancyGrid
	return (unsafe.Pointer)(C.nav_msgs__msg__OccupancyGrid__create())
}

func (t _OccupancyGridTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.nav_msgs__msg__OccupancyGrid__destroy((*C.nav_msgs__msg__OccupancyGrid)(pointer_to_free))
}

func (t _OccupancyGridTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*OccupancyGrid)
	mem := (*C.nav_msgs__msg__OccupancyGrid)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	MapMetaDataTypeSupport.AsCStruct(unsafe.Pointer(&mem.info), &m.Info)
	primitives.Int8__Sequence_to_C((*primitives.CInt8__Sequence)(unsafe.Pointer(&mem.data)), m.Data)
}

func (t _OccupancyGridTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*OccupancyGrid)
	mem := (*C.nav_msgs__msg__OccupancyGrid)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	MapMetaDataTypeSupport.AsGoStruct(&m.Info, unsafe.Pointer(&mem.info))
	primitives.Int8__Sequence_to_Go(&m.Data, *(*primitives.CInt8__Sequence)(unsafe.Pointer(&mem.data)))
}

func (t _OccupancyGridTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__OccupancyGrid())
}

type COccupancyGrid = C.nav_msgs__msg__OccupancyGrid
type COccupancyGrid__Sequence = C.nav_msgs__msg__OccupancyGrid__Sequence

func OccupancyGrid__Sequence_to_Go(goSlice *[]OccupancyGrid, cSlice COccupancyGrid__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OccupancyGrid, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		OccupancyGridTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func OccupancyGrid__Sequence_to_C(cSlice *COccupancyGrid__Sequence, goSlice []OccupancyGrid) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.nav_msgs__msg__OccupancyGrid)(C.malloc(C.sizeof_struct_nav_msgs__msg__OccupancyGrid * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		OccupancyGridTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func OccupancyGrid__Array_to_Go(goSlice []OccupancyGrid, cSlice []COccupancyGrid) {
	for i := 0; i < len(cSlice); i++ {
		OccupancyGridTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func OccupancyGrid__Array_to_C(cSlice []COccupancyGrid, goSlice []OccupancyGrid) {
	for i := 0; i < len(goSlice); i++ {
		OccupancyGridTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
