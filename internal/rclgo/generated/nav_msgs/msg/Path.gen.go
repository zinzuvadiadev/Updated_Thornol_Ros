// Code generated by rclgo-gen. DO NOT EDIT.

package nav_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "thornol/internal/rclgo/generated/geometry_msgs/msg"
	std_msgs_msg "thornol/internal/rclgo/generated/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <nav_msgs/msg/path.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("nav_msgs/Path", PathTypeSupport)
	typemap.RegisterMessage("nav_msgs/msg/Path", PathTypeSupport)
}

type Path struct {
	Header std_msgs_msg.Header `yaml:"header"`// Indicates the frame_id of the path.
	Poses []geometry_msgs_msg.PoseStamped `yaml:"poses"`// Array of poses to follow.
}

// NewPath creates a new Path with default values.
func NewPath() *Path {
	self := Path{}
	self.SetDefaults()
	return &self
}

func (t *Path) Clone() *Path {
	c := &Path{}
	c.Header = *t.Header.Clone()
	if t.Poses != nil {
		c.Poses = make([]geometry_msgs_msg.PoseStamped, len(t.Poses))
		geometry_msgs_msg.ClonePoseStampedSlice(c.Poses, t.Poses)
	}
	return c
}

func (t *Path) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Path) SetDefaults() {
	t.Header.SetDefaults()
	t.Poses = nil
}

func (t *Path) GetTypeSupport() types.MessageTypeSupport {
	return PathTypeSupport
}

// PathPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PathPublisher struct {
	*rclgo.Publisher
}

// NewPathPublisher creates and returns a new publisher for the
// Path
func NewPathPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PathPublisher, error) {
	pub, err := node.NewPublisher(topic_name, PathTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PathPublisher{pub}, nil
}

func (p *PathPublisher) Publish(msg *Path) error {
	return p.Publisher.Publish(msg)
}

// PathSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PathSubscription struct {
	*rclgo.Subscription
}

// PathSubscriptionCallback type is used to provide a subscription
// handler function for a PathSubscription.
type PathSubscriptionCallback func(msg *Path, info *rclgo.MessageInfo, err error)

// NewPathSubscription creates and returns a new subscription for the
// Path
func NewPathSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PathSubscriptionCallback) (*PathSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Path
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PathTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PathSubscription{sub}, nil
}

func (s *PathSubscription) TakeMessage(out *Path) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePathSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePathSlice(dst, src []Path) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PathTypeSupport types.MessageTypeSupport = _PathTypeSupport{}

type _PathTypeSupport struct{}

func (t _PathTypeSupport) New() types.Message {
	return NewPath()
}

func (t _PathTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.nav_msgs__msg__Path
	return (unsafe.Pointer)(C.nav_msgs__msg__Path__create())
}

func (t _PathTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.nav_msgs__msg__Path__destroy((*C.nav_msgs__msg__Path)(pointer_to_free))
}

func (t _PathTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Path)
	mem := (*C.nav_msgs__msg__Path)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	geometry_msgs_msg.PoseStamped__Sequence_to_C((*geometry_msgs_msg.CPoseStamped__Sequence)(unsafe.Pointer(&mem.poses)), m.Poses)
}

func (t _PathTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Path)
	mem := (*C.nav_msgs__msg__Path)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	geometry_msgs_msg.PoseStamped__Sequence_to_Go(&m.Poses, *(*geometry_msgs_msg.CPoseStamped__Sequence)(unsafe.Pointer(&mem.poses)))
}

func (t _PathTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Path())
}

type CPath = C.nav_msgs__msg__Path
type CPath__Sequence = C.nav_msgs__msg__Path__Sequence

func Path__Sequence_to_Go(goSlice *[]Path, cSlice CPath__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Path, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PathTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Path__Sequence_to_C(cSlice *CPath__Sequence, goSlice []Path) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.nav_msgs__msg__Path)(C.malloc(C.sizeof_struct_nav_msgs__msg__Path * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PathTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Path__Array_to_Go(goSlice []Path, cSlice []CPath) {
	for i := 0; i < len(cSlice); i++ {
		PathTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Path__Array_to_C(cSlice []CPath, goSlice []Path) {
	for i := 0; i < len(goSlice); i++ {
		PathTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
